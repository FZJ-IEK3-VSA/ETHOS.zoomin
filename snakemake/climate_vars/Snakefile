import os
import traceback
import json
from zoomin import disaggregation_manager as disagg_manager
from zoomin import snakemake_utils as sm_utls
from zoomin.post_disagg_calculation import perform_post_disagg_calculation
from dotenv import load_dotenv, find_dotenv

# find .env automagically by walking up directories until it's found
dotenv_path = find_dotenv()
# load up the entries as environment variables
load_dotenv(dotenv_path)

db_name = os.environ.get("DB_NAME")

bad_proxy_dict = {}

def log_error(error, file_name):
    FILE_PATH = f"output_logs/{db_name}/error_{file_name}.log"

    with open(FILE_PATH, 'w') as f:
        print(error)
        f.write(error)

rule all:
    input:
        "bad_proxy_log.json"

climate_vars = sm_utls.get_climate_vars()

# Define a wildcard for each parameter
wildcard_constraints:
    # climate vars 
    wc_climate_var_detail = "|".join(climate_vars),
    wc_db_name = db_name

# =========================================================================
#############      CLIMATE VARS DISAGGREGATION       ####################
# =========================================================================

rule disaggregate_climate_vars:
    output:
        touch("output_logs/{wc_db_name}/{wc_climate_var_detail}.log")
    run:
        try:
            disagg_manager.process_climate_var(wildcards.wc_climate_var_detail)
        
        except Exception as e:
            log_error(traceback.format_exc(), wildcards.wc_climate_var_detail)
            raise e

#==========================================================================

rule final:
    input:
        expand("output_logs/{db_name}/{var_name}.log", 
                db_name=db_name,
                var_name=climate_vars)
    output:
        "bad_proxy_log.json"
    run:
        # log bad proxies 
        with open("bad_proxy_log.json", 'w') as fp:
            json.dump(bad_proxy_dict, fp)
